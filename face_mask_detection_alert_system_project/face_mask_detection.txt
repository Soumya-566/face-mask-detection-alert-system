from keras.models import Sequential
from keras.layers import Dense,Activation,Flatten,Dropout
from keras.layers import Conv2D,MaxPooling2D


img_rows,img_cols=112,112

images=[]
labels=[]



num_classes=2
batch_size=32
model=Sequential()
img_rows,img_cols=112,112
model.add(Conv2D(64,(3,3),input_shape=(img_rows,img_cols,1)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(128,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Flatten())
model.add(Dropout(0.5))



model.add(Dense(6,activation='relu'))
model.add(Dense(num_classes,activation='softmax'))


print(model.summary())



import cv2
import numpy as np
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split


img_rows,img_cols=112,112

images=[]
labels=[]


import os
print(os.getcwd())
from google.colab import drive
drive.mount('/content/drive')




import os
path='/content/'
os.chdir(path)
print(os.listdir(path))
#os.chdir('/My Drive/')
#Dataset='dataset'
#Data_dir=os.listdir(dataset)







import os
path='/content/drive/MyDrive/'
os.chdir(path)
print(os.listdir(path))
#os.chdir('/My Drive/')
Dataset='dataset'
Data_dir=os.listdir(dataset)
print(Data_dir)



import cv2
import numpy as np
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split




img_rows,img_cols=112,112

images=[]
labels=[]




images=[]
labels=[]

for category in Data_dir:
      folder_path=os.path.join(Dataset, category)
      for img in os.listdir(folder_path):
        img_path = os.path.join(folder_path,img)
        img=cv2.imread(img_path)

        try:

           grayscale_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
           resized_img=cv2.resize(grayscale_img,(img_rows,img_cols))
           images.append(resized_img)
           labels.append(category)
        except Exception as e:
          print("Execption:",e)






images=np.array(images)/255.0
images=np.reshape(images,(images.shape[0],img_rows,img_cols,1))
lb=LabelBinarizer()
labels=lb.fit_transform(labels)
labels=to_categorical(labels)
labels=np.array(labels)
print(os.getcwd())






(train_X,test_X,train_y,test_y)=train_test_split(images,labels,test_size=0.25,random_state=0)
 






from keras.utils.vis_utils import plot_model
plot_model(model,to_file='face_mask_detection_architecture.png')



import keras
from tensorflow.keras.optimizers import Adam
epochs=10
model.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.001),metrics=['accuracy'])
fitted_model=model.fit(train_X,train_y,epochs=epochs,validation_split=0.25)


model.save('face_mask_detection_alert_system.h5')


from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def take_photo(filename='photo.jpg', quality=0.8):
  js = Javascript('''
    async function takePhoto(quality) {
      const div = document.createElement('div');
      const capture = document.createElement('button');
      capture.textContent = 'Capture';
      div.appendChild(capture);

      const video = document.createElement('video');
      video.style.display = 'block';
      const stream = await navigator.mediaDevices.getUserMedia({video: true});

      document.body.appendChild(div);
      div.appendChild(video);
      video.srcObject = stream;
      await video.play();

      // Resize the output to fit the video element.
      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

      // Wait for Capture to be clicked.
      await new Promise((resolve) => capture.onclick = resolve);

      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getVideoTracks()[0].stop();
      div.remove();
      return canvas.toDataURL('image/jpeg', quality);
    }
    ''')
  display(js)
  data = eval_js('takePhoto({})'.format(quality))
  binary = b64decode(data.split(',')[1])
  with open(filename, 'wb') as f:
    f.write(binary)
  return filename
 


from IPython.display import Image
from keras.models import load_model
import cv2
import numpy as np
import tkinter
from tkinter import messagebox
import smtplib

from google.colab.patches import cv2_imshow
model=load_model('face_mask_detection_alert_system.h5')
face_det_classifier=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
vid_source=cv2.VideoCapture(0)
text_dict={0:'Mask ON',1:'No Mask'}
rect_color_dict={0:(0,255,0),1:(0,0,255)}
SUBJECT="SUJECT"
TEXT="nO MASK"
while True:
  filename = take_photo()
  p=open(filename,"rb")
  display(Image(filename))
  #print('Saved to {}'.format(filename))
  model=load_model('face_mask_detection_alert_system.h5')
  face_det_classifier=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
  # Show the image which was just taken.
  img=cv2.imread(filename, cv2.IMREAD_COLOR)
  
  grayscale_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  
  faces=face_det_classifier.detectMultiScale(grayscale_img,1.3,5)
  for (x,y,w,h) in faces:
    face_img=grayscale_img[y:y+w,x:x+w]
    resized_img=cv2.resize(face_img,(112,112))
    normalized_img=resized_img/255.0
    reshaped_img=np.reshape(normalized_img,(1,112,112,1))
    result=model.predict(reshaped_img)
    label=np.argmax(result,axis=1)[0]
    cv2.rectangle(img,(x,y),(x+w,y+h),rect_color_dict[label],2)
    cv2.rectangle(img,(x,y),(x,y-40),rect_color_dict[label],-1)
    cv2.putText(img,text_dict[label],(x,y-10),cv2.FONT_HERSHEY_SIMPLEX,0.0,(0,0,0),2)

    if label==1:
      message='Subject:{}\n\n{}'.format(SUBJECT,TEXT)
      #mail=smtplib.SMTP('smtp.gmail.com',587)
      #mail.ehlo()
      #mail.starttls()
      #mail.login('facemaskdetection@gmail.com','****')
      #mail.sendmail('facemaskdetection@gmail.com','facemaskdetection@gmail.com',message)
      #mail.close
      #smtp = SMTP()
      #smtp.set_debuglevel(debuglevel)
      #smtp.connect('smtp.seznam.cz', 587)
      #smtp.login('facemaskdetection@gmail.com', '***')
      
      c=smtplib.SMTP_SSL('smtp.gmail.com',465)
      c.login('facemaskdetection@gmail.com','****')
      a='facemaskdetection@gmail.com'
      b='******'
      c.login(a, b)
      c.sendmail(a,'facemaskdetection@gmail.com',message)
    else:
      pass
      break
cv2.imshow('LIVE Video Feed',img)
key=cv2.waitKey(1)
if(key==27):
    break
cv2.destroyAllWindows()
source.release()